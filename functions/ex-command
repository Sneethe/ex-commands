local -l method gmethod=ere
[[ -o rematchpcre ]] && gmethod=pcre

emulate -L zsh
setopt extendedglob

local curcontext=zvm-cmd::: p REPLY MATCH MBEGIN MEND
local -a cmd match mbegin mend

# Keep history of excmds
fc -ap "${HISTFILE%.excmd}.excmd"

zstyle -s :zle:zvm-ex-command prompt p || p=':'
zstyle -s :zle:zvm-ex-command method method || method=$gmethod

read-from-minibuffer "$p" || return 1

cmd=("${(@z)REPLY}")

if [[ $cmd[1] = help ]]; then
	ex-command-help ${(Q)cmd[2]}

elif [[ $REPLY = (#b)s(|ubstitute)([^[:alnum:]\&])* ]]; then
	local d=$match[2]
	if [[ $REPLY = (#b)s$d((\\?|\\$d|[^\\$d])#)$d((\\?|\\$d|[^\\$d])#)($d*|) ]]; then
		local -aU pcreflags
		local -i global insens
		for flag in ${(s::)match[5]:1}; case $flag in
			e) method=ere ;;
			f) method=fixed ;;
			G) method=glob ;;
			p) method=pcre ;;
			g) global=1 ;;
			i) insens=1 ;;
			I) insens=0 ;;
			*) zle -M "$0: unknown flag, ignored: ${(q-)flag}"
		esac
		# unescape escaped delimiters
		local find=${match[1]//\\$d/$d} repl=${match[3]//\\$d/$d}
		case $method in
			ere) setopt norematchpcre ;;
			pcre)
				setopt rematchpcre
				((insens)) && find='(?i)'$find
				;;
			glob)
				((insens)) &&find='(#i)'$find
		esac
		if [[ $method != fixed ]]; then
			# Shorthand: \N -> $match[n], & -> $MATCH
			# Use ${match:1}, it correctly removes the extra backslash for \\ and \&
			# If ${match:1} is a digit, then ${match[N]}
			# If ${match:1} is empty, then $MATCH
			repl=${repl//(#m)(\\\\|\\&|&|\\[[:digit:]])/${${${MATCH:1}/(#m)[[:digit:]]/'${match['$MATCH']}'}:-'$MATCH'}}
		fi
		# get or save $EXLASTSEARCH
		typeset -g EXLASTSEARCH=${find:=${EXLASTSEARCH:-${LASTSEARCH}}}

		if [[ -z $find ]]; then
			zle -M "$WIDGET: No previous search"
			return 1
		fi

		case $global$method in
			0*re) [[ $RBUFFER =~ $2 ]] && RBUFFER=${RBUFFER[1,MBEGIN-1]}${(e)repl}${RBUFFER[MEND+1,-1]} ;;
			1*re) regexp-replace BUFFER "$find" "$repl" ;;
			0glob) RBUFFER=${RBUFFER/(#b)$~find/${(e)repl}} ;; 
			1glob) BUFFER=${BUFFER//(#b)$~find/${(e)repl}} ;;
			0fixed) RBUFFER=${RBUFFER/(#b)$find/${(e)repl}} ;; 
			1fixed) BUFFER=${BUFFER//(#b)$find/${(e)repl}} ;;
			*)
				zle -M "$WIDGET: Unknown method: $method"
				return 1
		esac
	else
		zle -M "$WIDGET: Bad substitution"
		return 1
	fi
	zle -R

# try dequoting the first argument and running a widget
elif [[ -n ${(Mk)widgets:#${(Q)cmd[1]}} ]]; then
	zle ${(Q)cmd[1]} -w - "${(@Q)cmd[2,-1]}"
else
	zle -M "$WIDGET: Unknown command: ${cmd[1]}"
	return 1
fi
print -sr "$REPLY"
zle reset-prompt
return 0
# vim:ft=zsh
